
Klaver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cae  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005a  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002337  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_25>
  68:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  6c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  70:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  74:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  7c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  80:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  84:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  88:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  8c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  90:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  94:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a1 30       	cpi	r26, 0x01	; 1
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 83 00 	call	0x106	; 0x106 <main>
  b8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_25>:
#include <avr/io.h>
#include <avr/interrupt.h>
uint8_t keyIsHeld = 0;
volatile uint8_t heldKeys[4];
volatile uint8_t key = 0;
ISR(USART1_RX_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	char value = UDR1;
  cc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	if (value == '0') {
  d0:	80 33       	cpi	r24, 0x30	; 48
  d2:	21 f4       	brne	.+8      	; 0xdc <__vector_25+0x1c>
		//heldKeys[0] = 0;
		key = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__vector_25+0x20>
	}
	else {
		//heldKeys[0] = UDR1;
		key = value;
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	//PORTA = UDR1;
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <init_uart>:
void init_uart(){
	UBRR1 = 12;
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = (1 << TXEN1)|(1 << RXEN1)|(1 << RXCIE1);
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 104:	08 95       	ret

00000106 <main>:
}

int main(void)
{
	init_uart();
 106:	0e 94 76 00 	call	0xec	; 0xec <init_uart>
	sei();
 10a:	78 94       	sei
    DDRA = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
 110:	82 b9       	out	0x02, r24	; 2
    while (1) {
		//PORTA = heldKeys[0];
		PORTA = key;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	82 b9       	out	0x02, r24	; 2
 118:	fc cf       	rjmp	.-8      	; 0x112 <main+0xc>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>

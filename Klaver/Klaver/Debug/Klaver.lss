
Klaver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800132  00800132  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1d  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_17>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_25>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e6       	ldi	r30, 0x6C	; 108
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 33       	cpi	r26, 0x32	; 50
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e3       	ldi	r26, 0x32	; 50
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 33       	cpi	r26, 0x33	; 51
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  ce:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__vector_17>:
			return SILENCE;
	}
}
uint16_t getCounterLimit(int frequency) {	// Calculate timer limit based on sys clock speed and frequency of note to be played
	return SYSTEM_CLOCK/(frequency*2);
}
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	93 b1       	in	r25, 0x03	; 3
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	89 27       	eor	r24, r25
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_25>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 10a:	80 33       	cpi	r24, 0x30	; 48
 10c:	19 f4       	brne	.+6      	; 0x114 <__vector_25+0x1a>
 10e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_25+0x1e>
 114:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <selectNote>:
 124:	81 56       	subi	r24, 0x61	; 97
 126:	89 31       	cpi	r24, 0x19	; 25
 128:	48 f4       	brcc	.+18     	; 0x13c <selectNote+0x18>
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret

00000142 <init_uart>:

void init_uart(){	// 9600 baud, no parity
	UBRR1 = 12;
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 14a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
 14e:	88 e9       	ldi	r24, 0x98	; 152
 150:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 15a:	08 95       	ret

0000015c <init_timer>:
}
void init_timer() {			// NB! DOES NOT START TIMER
	TCCR1A = (1 << COM1A1); // CTC TOP = OCR1A
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12);	
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 1 << OCIE1A;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 16e:	08 95       	ret

00000170 <start_timer>:
}
void start_timer() {	// Start timer by enabling clock
	TCCR1B |= 1 << CS10;
 170:	e1 e8       	ldi	r30, 0x81	; 129
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <stop_timer>:
}
void stop_timer() {		// Pause timer by disabling clock
	TCCR1B &= ~(1<<CS10);
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <main>:
}

int main(void)
{
	init_uart();
 188:	0e 94 a1 00 	call	0x142	; 0x142 <init_uart>
	init_timer();
 18c:	0e 94 ae 00 	call	0x15c	; 0x15c <init_timer>
	uint16_t activeNote;	// Note currently being played

	sei();					// Enable interrupts
 190:	78 94       	sei
    DDRA = 0xFF;			// Set PORTA leds as output
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	81 b9       	out	0x01, r24	; 1
	DDRB = 1 << SPEAKER;	// Set speaker pin as output
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	84 b9       	out	0x04, r24	; 4
		default :
			return SILENCE;
	}
}
uint16_t getCounterLimit(int frequency) {	// Calculate timer limit based on sys clock speed and frequency of note to be played
	return SYSTEM_CLOCK/(frequency*2);
 19a:	90 e8       	ldi	r25, 0x80	; 128
 19c:	c9 2e       	mov	r12, r25
 19e:	94 e8       	ldi	r25, 0x84	; 132
 1a0:	d9 2e       	mov	r13, r25
 1a2:	9e e1       	ldi	r25, 0x1E	; 30
 1a4:	e9 2e       	mov	r14, r25
 1a6:	f1 2c       	mov	r15, r1

	sei();					// Enable interrupts
    DDRA = 0xFF;			// Set PORTA leds as output
	DDRB = 1 << SPEAKER;	// Set speaker pin as output
    while (1) {
		PORTA = key;
 1a8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 1ac:	82 b9       	out	0x02, r24	; 2
		activeNote = selectNote(key);	// decipher what note is to be played
 1ae:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 1b2:	0e 94 92 00 	call	0x124	; 0x124 <selectNote>
 1b6:	ec 01       	movw	r28, r24
		if (activeNote == SILENCE) {	// if no note is to be played, stop timer
 1b8:	89 2b       	or	r24, r25
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <main+0x3a>
			stop_timer();
 1bc:	0e 94 be 00 	call	0x17c	; 0x17c <stop_timer>
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <main+0x20>
		}
		else {							// If a sound is to be played, start timer and set limit accordingly
			start_timer();
 1c2:	0e 94 b8 00 	call	0x170	; 0x170 <start_timer>
		default :
			return SILENCE;
	}
}
uint16_t getCounterLimit(int frequency) {	// Calculate timer limit based on sys clock speed and frequency of note to be played
	return SYSTEM_CLOCK/(frequency*2);
 1c6:	9e 01       	movw	r18, r28
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	03 2e       	mov	r0, r19
 1ce:	00 0c       	add	r0, r0
 1d0:	44 0b       	sbc	r20, r20
 1d2:	55 0b       	sbc	r21, r21
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodsi4>
		if (activeNote == SILENCE) {	// if no note is to be played, stop timer
			stop_timer();
		}
		else {							// If a sound is to be played, start timer and set limit accordingly
			start_timer();
			OCR1A = getCounterLimit(activeNote);
 1dc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e4:	e1 cf       	rjmp	.-62     	; 0x1a8 <main+0x20>

000001e6 <__divmodsi4>:
 1e6:	05 2e       	mov	r0, r21
 1e8:	97 fb       	bst	r25, 7
 1ea:	1e f4       	brtc	.+6      	; 0x1f2 <__divmodsi4+0xc>
 1ec:	00 94       	com	r0
 1ee:	0e 94 0a 01 	call	0x214	; 0x214 <__negsi2>
 1f2:	57 fd       	sbrc	r21, 7
 1f4:	07 d0       	rcall	.+14     	; 0x204 <__divmodsi4_neg2>
 1f6:	0e 94 12 01 	call	0x224	; 0x224 <__udivmodsi4>
 1fa:	07 fc       	sbrc	r0, 7
 1fc:	03 d0       	rcall	.+6      	; 0x204 <__divmodsi4_neg2>
 1fe:	4e f4       	brtc	.+18     	; 0x212 <__divmodsi4_exit>
 200:	0c 94 0a 01 	jmp	0x214	; 0x214 <__negsi2>

00000204 <__divmodsi4_neg2>:
 204:	50 95       	com	r21
 206:	40 95       	com	r20
 208:	30 95       	com	r19
 20a:	21 95       	neg	r18
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	4f 4f       	sbci	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255

00000212 <__divmodsi4_exit>:
 212:	08 95       	ret

00000214 <__negsi2>:
 214:	90 95       	com	r25
 216:	80 95       	com	r24
 218:	70 95       	com	r23
 21a:	61 95       	neg	r22
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	8f 4f       	sbci	r24, 0xFF	; 255
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	08 95       	ret

00000224 <__udivmodsi4>:
 224:	a1 e2       	ldi	r26, 0x21	; 33
 226:	1a 2e       	mov	r1, r26
 228:	aa 1b       	sub	r26, r26
 22a:	bb 1b       	sub	r27, r27
 22c:	fd 01       	movw	r30, r26
 22e:	0d c0       	rjmp	.+26     	; 0x24a <__udivmodsi4_ep>

00000230 <__udivmodsi4_loop>:
 230:	aa 1f       	adc	r26, r26
 232:	bb 1f       	adc	r27, r27
 234:	ee 1f       	adc	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	a2 17       	cp	r26, r18
 23a:	b3 07       	cpc	r27, r19
 23c:	e4 07       	cpc	r30, r20
 23e:	f5 07       	cpc	r31, r21
 240:	20 f0       	brcs	.+8      	; 0x24a <__udivmodsi4_ep>
 242:	a2 1b       	sub	r26, r18
 244:	b3 0b       	sbc	r27, r19
 246:	e4 0b       	sbc	r30, r20
 248:	f5 0b       	sbc	r31, r21

0000024a <__udivmodsi4_ep>:
 24a:	66 1f       	adc	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	1a 94       	dec	r1
 254:	69 f7       	brne	.-38     	; 0x230 <__udivmodsi4_loop>
 256:	60 95       	com	r22
 258:	70 95       	com	r23
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	9b 01       	movw	r18, r22
 260:	ac 01       	movw	r20, r24
 262:	bd 01       	movw	r22, r26
 264:	cf 01       	movw	r24, r30
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
